#!/bin/tcsh  
#******************** Definizione delle variabili principali ********************

#2023.12 Edit by PF  (Create rinex3 with Anubis)
set path = ($path /opt/bin /usr/local/sbin /usr/sbin /sbin /usr/local/bin /usr/bin /bin /usr/X11R6/bin /opt/www/htdig/bin /opt/kde/bin \
				  /usr/lib/qt-3.0.4/bin /usr/share/texmf/bin /home/frednet/bin .)
set JOB = `basename $0`
set DataType = "Hourly" # valido per tutte le operazioni sui file orari
set FileTypeDir = "$DataType"
set DataTypeFTP = "Daily" # solo per l'upload via ftp del dato giornaliero
set FileType = 'U'
set Year = `date +%Y | gawk '{print substr($0,length($0)-1,length($0))}'`
set YearLong = `date +%Y | gawk '{print substr($0,length($0)-3,length($0))}'`
set TODAY = `date +%j`
set YESTERDAY = `date --date='yesterday' +%j`
set SamplingInterval = (30) # intervalli di campionamento 30s 5s 1s

set HOURS = 24 # serve per il test sul numero dei dati
set SECONDS = `echo "$HOURS 3600" | gawk '{$1=$1*$2;print int($1)}'` # serve per il test sul numero dei dati
set NumEpochsPercent1 = 0.9 # � la % minima di epoche che si dovrebbero vedere in base al file di navigazione
set NumEpochsPercent2 = 0.9 # � la % minima di epoche con dati rilevanti ricavati dal file di osservazione
set NumGapsPercent1 = 0.5 # � la % minima di gaps per il controllo sulla decimazione dei file rinex
set RATIOLIMIT = 40
set SamplingInterval = (30) # intervalli di campionamento 30s 5s 1s
set Epochs = ()
set GapsSafe = ()
foreach Interval ($SamplingInterval)
    set Epoch = `echo "$SECONDS $Interval" | gawk '{$1=$1/$2;print int($1)}'`
    set GapSafe = `echo "$Epoch $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
    set Epochs = ($Epochs $Epoch)
    set GapsSafe =  ($GapsSafe $GapSafe)
end
set GapsType = ($SamplingInterval)
set ERROR_Managed = ()


# N.B. YESTERDAY_Year e YESTERDAY_YearLong diventeranno Year e YearLong all'interno del loop che include il
# download della fat e dei dati (a meno che l'anno non venga passato come parametro di riga),
# Year e YearLong definiti precedentemente vengono usati solo per il nome e la data del logfile
set YESTERDAY_Year = `date --date='yesterday' +%Y | gawk '{print substr($0,length($0)-1,length($0))}'`
set YESTERDAY_YearLong = `date --date='yesterday' +%Y | gawk '{print substr($0,length($0)-3,length($0))}'`

#******************** Definizione delle directory principali ********************
set DumpDir = '/data'

set LogDir  = 'WORKDIR/LOGS'
set DwnlDir = 'WORKDIR/mkrinex'
set RnxDir  = 'FTP_Data/rinex'
set RwDir = 'FTP_Data/raw'
set RegetDir = 'reget'

#set LogDir  = 'log'
#set DwnlDir = 'mkrinex'
#set RnxDir = 'rinex'
#set RwDir = 'raw'
set ScptDir = 'scripts'
set ActualUser = "$user"
set UserDataDir = "$DumpDir/$ActualUser"
set RinexDir = "$DumpDir/$ActualUser/$RnxDir"
set RawDir = "$DumpDir/$ActualUser/$RwDir"
set LogDir  = "$DumpDir/$ActualUser/$LogDir"
set LogScriptsDir = "$LogDir/$ScptDir/$YearLong/$TODAY"
set DumpDir = "$DumpDir/$ActualUser/$DwnlDir"
set BinDir = "/home/$ActualUser/bin"

set ARCHIVE = /data/frednet
set MKRINEX = $ARCHIVE/WORKDIR/mkrinex
set TEQC    = $FREDNET/OPTIONS/TEQC

#******************** Definizione delle variabili secondarie ********************
set LocalSitesList=`ls -l $DumpDir | gawk '$1 ~/d/ && length($NF)==4 && $NF==toupper($NF) {print $NF}'`
set ActualMailsList = "dzuliani@inogs.it pfabris@inogs.it"
set FileExtensions = (MO MN)
set SendMail = "No" #Se � settatta su No spedisce mail solo quando ci sono errori, se � messa su Yes spedisce sempre l'email

#********************  Variabili di abilitazione scripts ********************
set FTPOk = "Yes"

#******************** Programmi e scripts esterni ********************
set PUT_FTP_Script = GPS_FTP_Put # solo per l'ftp del dato giornaliero 
set PUT_SFTP_Script = GPS_SFTP_Put # solo per l'sftp del dato giornaliero

#********************  File di configurazione ********************
set Cfg_PUT_FTP_Script = "ftp_upld.$DataTypeFTP.cfg" # usa la configurazione ftp giornaliera
set Cfg_PUT_SFTP_Script = "sftp_upld.$DataTypeFTP.cfg" # usa la configurazione ftp giornaliera

#********************  File di log ********************
 set LogFileName = `date | gawk '{print "'"$JOB"'_" $1 "_" $2 "_" $3 "_" $4 "_" $5 ".log"}'` # modificato



#******************** Come usare lo script ********************
set USAGE = "\n"
set USAGE = "$USAGE""USAGE:"
set USAGE = "$USAGE""\n""`basename $0` -d [DOYs list] | -y [Years list] | -s [Sites list] | -m [Recp. list] | -a  | -noupld | -unpub "
set USAGE = "$USAGE""\n"
set USAGE = "$USAGE""\n""-d [DOYs  list] : list of Days Of the Year in Julian day format,"
set USAGE = "$USAGE""\n""                  allowed values are 1 up to 356 (default is yesterday)."
set USAGE = "$USAGE""\n""-ds [DOYs  list]: Start DOY and end DOY for multi doy building,"
set USAGE = "$USAGE""\n""                  allowed values are 1 up to 356 (default is yesterday)."
set USAGE = "$USAGE""\n""-y [Years list] : list of Years taken in account, allowed values are 2002"
set USAGE = "$USAGE""\n""                  up to xxxx (default is the year of yesterday)."
set USAGE = "$USAGE""\n""-s [Sites list] : list of sites taken in account (no defaults defined)."
set USAGE = "$USAGE""\n""                  Allowed values are name composed by capital letters and"
set USAGE = "$USAGE""\n""                  numbers. The size of the names must be 4 letters long."
set USAGE = "$USAGE""\n""-m [Recp. list] : it sends, by e-mail, the $JOB log file"
set USAGE = "$USAGE""\n""                  to the recipients in the list, without this option"
set USAGE = "$USAGE""\n""                  $JOB doesn't send e-mails (now it sends"
set USAGE = "$USAGE""\n""                  e-mails to dzuliani@inogs only)"
set USAGE = "$USAGE""\n""-a              : automatic mode, $JOB takes the sites list"
set USAGE = "$USAGE""\n""                  from local disk installed sites and use default options"
set USAGE = "$USAGE""\n""                  (see above)."
set USAGE = "$USAGE""\n""-noupld         : do not send data to anyone (on the contrary data will be"
set USAGE = "$USAGE""\n""                  uploaded using ftp)"
set USAGE = "$USAGE""\n""-unpub          : unpub  mode. Option to build daily files  from stations whose RINEX"
set USAGE = "$USAGE""\n""                  are saved in the UNPUB directory."
set USAGE = "$USAGE""\n"


if(! $#) then
	echo "$USAGE"
	exit 1
endif


# se il disco locale � pieno scrivi il messaggio nel file di log ed esci
if (`df "$UserDataDir" | gawk '$4 ~/[0-9]+/ {print $4}' | gawk '{if ($0 ~/[^0-9+]/); else print $0}' | gawk '($0 <= 2000)'` != "") then
   echo "Local disk full aborting download" >> "$LogScriptsDir/$LogFileName"
   set ActualSitesList = ""
   cat "$LogScriptsDir/$LogFileName" | mailx "$ActualMailsList"
   exit 1
else
endif


#******************** Lettura dei parametri da linea di comando ********************
set ErrorUsage = ""
set ReadSites = "No"
set ReadDOYs = "No"
set ReadSpanDOYs = "No"
set ReadMails = "No"
set AutoMode = "No"
set ReadYears = "No"
set InitArg = "$argv[*]"
set Unpub = ""
set CommandLineDOYs = ""
set CommandLineSpanDOYs = ""
set CommandLineSites = ""
set CommandLineYears = ""
set CommandLineMails = ""
while($#)
	switch($1)
		case "-d":
			shift
			set CommandLineDOYs = `echo $1 | gawk '{if (length($0) == 1) print "00"$0} {if (length($0) == 2) print "0"$0} {if (length($0) == 3) print $0}'`
			if (`echo "$1" | gawk '$0 ~/[0-9]+/ {print $0}' | gawk '{if ($0 ~/[^0-9+]/); else print $0}' | gawk '($0 >= 1) && ($0 <=366)'` != "") then
			   set ReadDOYs = "Yes"
			   set ReadYears = "No"
			   set ReadSites = "No"
			   set ReadMails = "No"
			   set ReadSpanDOYs = "No"
			else
			   set ErrorUsage = "$ErrorUsage""Error -> $1 isn't a correct day of the year.\c"
			endif
			breaksw
		case "-ds":
			shift
			set CommandLineSpanDOYs = `echo $1 | gawk '{if (length($0) == 1) print "00"$0} {if (length($0) == 2) print "0"$0} {if (length($0) == 3) print $0}'`
			if (`echo "$1" | gawk '$0 ~/[0-9]+/ {print $0}' | gawk '{if ($0 ~/[^0-9+]/); else print $0}' | gawk '($0 >= 1) && ($0 <=366)'` != "") then
			   set ReadSpanDOYs = "Yes"
			   set ReadDOYs = "No"
			   set ReadYears = "No"
			   set ReadSites = "No"
			   set ReadMails = "No"
			else
			   set ErrorUsage = "$ErrorUsage""Error -> $1 isn't a correct day of the year.\c"
			endif
			breaksw
		case "-y":
			shift
			set CommandLineYears = $1
			if (`echo "$1" | gawk '$0 ~/[0-9]+/ {print $0}' | gawk '{if ($0 ~/[^0-9+]/); else print $0}' | gawk '($0 >= 2002) && (length($NF)==4)'` != "") then
			   set ReadYears = "Yes"
			   set ReadDOYs = "No"
			   set ReadSites = "No"
			   set ReadMails = "No"
			   set ReadSpanDOYs = "No"
			else
			   set ErrorUsage = "$ErrorUsage""Error -> $1 isn't a correct year.\c"
			endif
			breaksw
		case "-s":
			shift
			set CommandLineSites = "$1"
			if (`echo $1 | gawk 'length($NF)==4 && $NF==toupper($NF) {print $NF}'` != "") then
			   set ReadSites = "Yes"
			   set ReadYears = "No"
			   set ReadDOYs = "No"
			   set ReadMails = "No"
			   set ReadSpanDOYs = "No"
			else
			   set ErrorUsage = "$ErrorUsage""Error -> Sites list: [$CommandLineSites] isn't correct.\c"
			endif
			breaksw
		case "-m":
		     shift
			 set CommandLineMails = "$1"
			 if (`echo $1 | gawk ' /@/ {print $NF}'` != "") then
		        set ReadMails = "Yes"
				set ReadYears = "No"
			    set ReadSites = "No"
			    set ReadDOYs = "No"
			   set ReadSpanDOYs = "No"
			 else
			    set ErrorUsage = "$ErrorUsage""Error -> Mail recipients list: [$CommandLineMails] isn't correct.\c"
			 endif
			 breaksw
		case "-a":
		     set AutoMode = "Yes"
			 breaksw
		case "-noupld"
		     set FTPOk = "No"
		     breaksw
                case "-unpub"
                     set Unpub = "unpub"
                     breaksw
		default:
		     if ("$ReadSites" == "Yes") then
			    set CommandLineSites = "$CommandLineSites $1"
			    if ("$ReadDOYs" == "Yes" | "$ReadMails" == "Yes" | "$ReadYears" == "Yes" | "$ReadSpanDOYs" == "Yes") then
				   set ErrorUsage = "$ErrorUsage""Error -> Generic error, parameters: $InitArg not valid. \c"
				   breaksw
				else
                   if (`echo $1 | gawk 'length($NF)==4 && $NF==toupper($NF) {print $NF}'` != "") then
			       else
			          set ErrorUsage = "$ErrorUsage""Error -> Sites list: [$CommandLineSites] isn't correct.\c"
			       endif
				   breaksw
				endif
			 else
			 endif
		     if ("$ReadDOYs" == "Yes") then
                        set PassDOY = `echo $1 | gawk '{if (length($0) == 1) print "00"$0} {if (length($0) == 2) print "0"$0} {if (length($0) == 3) print $0}'`
                        set CommandLineDOYs = "$CommandLineDOYs $PassDOY"
			#set CommandLineDOYs = "$CommandLineDOYs $1"
			if ("$ReadSites" == "Yes" | "$ReadMails" == "Yes" | "$ReadYears" == "Yes" | "$ReadSpanDOYs" == "Yes") then
			   set ErrorUsage = "$ErrorUsage""Error -> Generic error, parameters: $InitArg not valid. \c"
			   breaksw
			else
			   if (`echo "$1" | gawk '$0 ~/[0-9]+/ {print $0}' | gawk '{if ($0 ~/[^0-9+]/); else print $0}' | gawk '($0 >= 1) && ($0 <=366)'` != "") then
			   else
			      set ErrorUsage = "$ErrorUsage""Error -> DOYs list: [$CommandLineDOYs] isn't correct.\c"
			   endif
			   breaksw
			endif
		     else
		     endif
		     if ("$ReadSpanDOYs" == "Yes") then
                        set PassDOY = `echo $1 | gawk '{if (length($0) == 1) print "00"$0} {if (length($0) == 2) print "0"$0} {if (length($0) == 3) print $0}'`
                        set CommandLineSpanDOYs = "$CommandLineSpanDOYs $PassDOY"
			#set CommandLineDOYs = "$CommandLineDOYs $1"
			if ("$ReadDOYs" == "Yes" | "$ReadSites" == "Yes" | "$ReadMails" == "Yes" | "$ReadYears" == "Yes") then
			   set ErrorUsage = "$ErrorUsage""Error -> Generic error, parameters: $InitArg not valid. \c"
			   breaksw
			else
			   if (`echo "$1" | gawk '$0 ~/[0-9]+/ {print $0}' | gawk '{if ($0 ~/[^0-9+]/); else print $0}' | gawk '($0 >= 1) && ($0 <=366)'` != "") then
			   else
			      set ErrorUsage = "$ErrorUsage""Error -> Span DOYs values: [$CommandLineSpanDOYs] isn't correct.\c"
			   endif
			   breaksw
			endif
		     else
		     endif
		     if ("$ReadYears" == "Yes") then
			    set CommandLineYears = "$CommandLineYears $1"
			    if ("$ReadDOYs" == "Yes" | "$ReadSites" == "Yes" | "$ReadMails" == "Yes" | "$ReadSpanDOYs" == "Yes") then
				   set ErrorUsage = "$ErrorUsage""Error -> Generic error, parameters: $InitArg not valid. \c"
				   breaksw
				else
				   if (`echo "$1" | gawk '$0 ~/[0-9]+/ {print $0}' | gawk '{if ($0 ~/[^0-9+]/); else print $0}' | gawk '($0 >= 2002) && (length($NF)==4)'` != "") then
				   else
				      set ErrorUsage = "$ErrorUsage""Error -> $1 isn't a correct year.\c"
				   endif
				   breaksw
				endif
			 else
			 endif
		     if ("$ReadMails" == "Yes") then
			    set CommandLineMails = "$CommandLineMails $1"
			    if ("$ReadDOYs" == "Yes" | "$ReadSites" == "Yes" | "$ReadYears" == "Yes" | "$ReadSpanDOYs" == "Yes") then
				   set ErrorUsage = "$ErrorUsage""Error -> Generic error, parameters: $InitArg not valid. \c"
				   breaksw
				else
				   if (`echo $1 | gawk ' /@/ {print $NF}'` != "") then
				   else
				      set ErrorUsage = "$ErrorUsage""Error -> Mail recipients list: [$CommandLineMails] isn't correct.\c"
				   endif
				   breaksw
				endif
			 else
			 endif
	         breaksw
	endsw
	shift
end

if ("$ErrorUsage" != "") then
    echo "Uncorrect command: `basename $0` $InitArg"
    echo "$ErrorUsage"
	echo ""
	echo "$USAGE"
	exit 1
else
   if ("$AutoMode" == "Yes") then
      if ($CommandLineDOYs != "" | $CommandLineSites != "" | $ReadYears != "" | $CommandLineMails != "" | $CommandLineSpanDOYs != "") then
	     echo
		 echo "Error -> parameter -a must be used alone."
		 exit 1
      else
	     echo
		 echo "Auto mode is on: year is: $HOURAGO_YearLong, DOY: is $HOURAGO_DOY, sites are: $LocalSitesList"
		 set ActualSitesList = "$LocalSitesList"
		 set ActualDOYsList = "$YESTERDAY"
		 set ActualYearsList = "$YESTERDAY_Year"
		 set ActualYearsLongList = "$YESTERDAY_YearLong"
	  endif
   else
	if ("$CommandLineDOYs" == "" & "$CommandLineSpanDOYs" == "") then
		set ActualDOYsList = "$YESTERDAY"
	else
		if ("$CommandLineDOYs" != "" & "$CommandLineSpanDOYs" != "") then
			echo "Error ->  Command line doys [-d] and span doys [-ds] are both set, function not provided"
			exit 1
		endif
		if ("$CommandLineDOYs" != "" ) then
			set ActualDOYsList = "$CommandLineDOYs"
		else
			set CommandLineSpanDOYs = ( $CommandLineSpanDOYs ) # crea l'array
			if ($#CommandLineSpanDOYs > 2) then
				echo "Error -> Span DOYs values: [$CommandLineSpanDOYs] isn't correct. Only 2 arguments (start doy and end doy) are allowed for the [-ds] option."
				exit 1
			endif
			set COUNT = $CommandLineSpanDOYs[1]
			set ActualDOYsList = ""
			while ($COUNT <= $CommandLineSpanDOYs[2])
				set PASSDOY = `echo $COUNT | gawk '{if (length($0) == 1) print "00"$0} {if (length($0) == 2) print "0"$0} {if (length($0) == 3) print $0}'`
				set ActualDOYsList = "$ActualDOYsList $PASSDOY"
				@ COUNT += 1
			end
			echo $ActualDOYsList

		endif

	endif
      if ("$CommandLineYears" == "") then
		 set ActualYearsList = "$YESTERDAY_Year"
	     set ActualYearsLongList = "$YESTERDAY_YearLong"
	  else
	     set ActualYearsLongList = ($CommandLineYears)
	     set ActualYearsList = `echo $ActualYearsLongList | gawk '{for (i=1; i<=NF; i++) {print substr($i,length($i)-1,2)}}'`
	  endif
	  if ("$CommandLineSites" == "") then
	     set ActualSitesList = "$LocalSitesList"
	  else
	     set ActualSitesList = "$CommandLineSites"
	  endif
	  if ("$CommandLineMails" == "") then
	  else
	      set ActualMailsList = "$CommandLineMails"
	  endif
	  foreach CommandLineSite ($CommandLineSites)
	       if (`echo "$LocalSitesList" | gawk '{for (i=1; i <= NF; i++) if ($i == "'"$CommandLineSite"'") print $i;}'` == "") then
		      echo
			  echo "Error -> The Command line Sites list: $CommandLineSites doesn't match the local Sites list: $LocalSitesList."
			  exit 1
		   else
		      set ActualSitesList = "$CommandLineSites"
		   endif
	  end
   endif
   if ("$Unpub" == "unpub") then
        #set DumpDir = '/data'
        set RnxDir  = 'WORKDIR/UNPUB/rinex'
        set RwDir   = 'WORKDIR/UNPUB/raw'
        set RawDir   = "$DumpDir/$ActualUser/$RwDir"
        set RinexDir = "$DumpDir/$ActualUser/$RnxDir"
        #set DumpDir = "$DumpDir/$ActualUser/$DwnlDir"
   endif
endif


#set CountYear = 1
#set FileSumYear = 0
echo "----------------------- $JOB log file -------------------------" >> "$LogScriptsDir/$LogFileName"
echo "" >> "$LogScriptsDir/$LogFileName"
echo "Date: `date`" >> "$LogScriptsDir/$LogFileName"
echo "Years Of the year list: $ActualYearsLongList" >> "$LogScriptsDir/$LogFileName"
echo "Days Of the day list: $ActualDOYsList" >> "$LogScriptsDir/$LogFileName"
#echo "Hours Of the hour list: $ActualHoursList" >> "$LogScriptsDir/$LogFileName"
echo "Sites list: $ActualSitesList" >> "$LogScriptsDir/$LogFileName"
echo "" >> "$LogScriptsDir/$LogFileName"

foreach Sampling ($SamplingInterval)
         set CountYear = 1
         set FileSumYear = 0
         echo $Sampling
         while ($CountYear <= $#ActualYearsLongList)
            set YearLong = $ActualYearsLongList[$CountYear]
            set Year = $ActualYearsList[$CountYear]
            @ CountYear++
            set FileSumDOY = 0
            echo "" >> "$LogScriptsDir/$LogFileName"
            echo "----------------------- Year: $YearLong -------------------------" >> "$LogScriptsDir/$LogFileName"
            echo "" >> "$LogScriptsDir/$LogFileName"
            foreach DOY ($ActualDOYsList)
                 echo "" >> "$LogScriptsDir/$LogFileName"
                 echo "----------------------- DOY: $DOY -------------------------" >> "$LogScriptsDir/$LogFileName"
                 echo "" >> "$LogScriptsDir/$LogFileName"
                 @ YESTERDAY = $DOY - 1
	         @ TOMORROW = $DOY + 1
	         set FileSumSite = 0
                 foreach Site ($ActualSitesList)
                         echo "$Year $DOY"
                         set ucsite = `echo $Site | tr 'a-z' 'A-Z'` # site -> SITE
                         set lcsite = `echo $Site | tr 'A-Z' 'a-z'` # SITE -> site
                         set TMP = $MKRINEX/$ucsite/$FileTypeDir/`basename $0` ; mkdir -p $TMP >& /dev/null
                         switch($Sampling)
	                      case 30:
                                    set NumEpochsDefault = 120
                                    set NumEpochsMin  = `echo "$NumEpochsDefault $NumEpochsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
                                    set NumEpochsSafe = `echo "$NumEpochsMin $NumEpochsPercent2" | gawk '{$1=$1*$2;print int($1)}'`
                                    #set NumGapsMin = `echo "$NumEpochsSafe $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
                                    set RINEX = $ARCHIVE/FTP_Data/rinex
                                    set RINEX = $ARCHIVE/$RnxDir
                                    set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget; mkdir -p $REGET >& /dev/null
                                    breaksw
                              case 5:
                                    set NumEpochsDefault = 720
                                    set NumEpochsMin  = `echo "$NumEpochsDefault $NumEpochsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
                                    set NumEpochsSafe = `echo "$NumEpochsMin $NumEpochsPercent2" | gawk '{$1=$1*$2;print int($1)}'`
                                    #set NumGapsMin = `echo "$NumEpochsSafe $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
                                    set RINEX = $ARCHIVE/FTP_Data/rinex_5s
                                    set RINEX = $ARCHIVE/$RnxDir"_5s"
                                    set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget_5s; mkdir -p $REGET >& /dev/null
                                    breaksw
                              case 1:
                                    set NumEpochsDefault = 3600
                                    set NumEpochsMin  = `echo "$NumEpochsDefault $NumEpochsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
                                    set NumEpochsSafe = `echo "$NumEpochsMin $NumEpochsPercent2" | gawk '{$1=$1*$2;print int($1)}'`
                                    #set NumGapsMin = `echo "$NumEpochsSafe $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
                                    set RINEX = $ARCHIVE/FTP_Data/rinex_1s
                                    set RINEX = $ARCHIVE/$RnxDir"_1s"
                                    set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget_1s; mkdir -p $REGET >& /dev/null
                                    breaksw
                         endsw
	                 echo "" >> "$LogScriptsDir/$LogFileName"
                         echo "----------------------- Site: $Site -------------------------" >> "$LogScriptsDir/$LogFileName"
                         echo "" >> "$LogScriptsDir/$LogFileName"
		         set HOUR = 0
		         set HOUR = 0
		         set FileSizeBytes = 0
		         set FileSizeHuman = 0
		         set FileSumDwnld = 0
		         set FileSumRaw = 0
		         set FileSumRinex = 0
		         set FileSumNav = 0
		         set FileSumSum = 0
		         set lses_Default = "a"
		         set USES_Default = "A"
		         set USITE = `echo $Site | tr 'a-z' 'A-Z'` # Site -> SITE
		         set lsite = `echo $Site | tr 'A-Z' 'a-z'` # Site -> site
			   #ZOUF00ITA_R_24030_01D_30S_MO.crx.gz
		         if ( -e $RINEX/$YearLong/$DOY/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx" ) then
	                    rm $RINEX/$YearLong/$DOY/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx" 
	                 endif
		         if ( -e $RINEX/$YearLong/$DOY/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MN.rnx"  ) then
	                    rm $RINEX/$YearLong/$DOY/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MN.rnx" 
	                 endif
		         set HourRinexList = ""
		         set HourNavListn = ""
			 set HourNavListg = ""
		         while ( $HOUR < 24 )
		               @ HOUR++
		               set HOURONDISK = `echo "$HOUR" | gawk ' {if (length($0) <=1) print 0$0; else print $0}'`
			       set STARTHOUR = `echo "${HOURONDISK} - 1" | bc | awk '{if (length($1) == "1") print "0"$1; else print $1}'`
		               set Ses = `echo $HOUR | hr2ses`
		               set USES = `echo $Ses | tr 'a-z' 'A-Z'` # Session -> SESSION
		               set lses = `echo $Ses | tr 'A-Z' 'a-z'` # Session -> Session
		               set StringOutput = $HOURONDISK
		               foreach FileExtension ($FileExtensions)
			               # FileExtensions = (d n s) (d = object rinex athanaka+compressato, n = file di broadcast, s = summary)
			                  switch($FileExtension)
				                case "MO"
							#VARM00ITA_R_20240780700_01H_30S_MO.crx.gz
                                                     ls $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz"
				                     if ( -e $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz" ) then
                                                        cp $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz" $TMP
				                        #uncompress  -c $TMP/$lsite$DOY$lses.$Year$FileExtension.Z | crx2rnx > $TMP/$lsite$DOY$lses.$Year"o"
					                if ( ! -z $TMP/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz") then
					                   set HourRinexList = "$HourRinexList $TMP/${USITE}00ITA_R_$YearLong${DOY}${STARTHOUR}00_01H_30S_MO.crx.gz"
						           set FileSize = `ls -lh $TMP/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz" | gawk '{print $5; print "Bytes"}'`
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz on disk, size: "$FileSize >> "$LogScriptsDir/$LogFileName"
					                else
					                   set SendMail = "Yes"
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz empty" >> "$LogScriptsDir/$LogFileName"
					                endif
					             else
					                set SendMail = "Yes"
					                if ( -e $REGET/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz" ) then
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz reget -->  "$REGET/$USITE"00ITA_R_"$YearLong${DOY}$HOURONDISK"00_01H_30S_MO.crx.gz" >> $LogScriptsDir/$LogFileName
					                else
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MO.crx.gz not on disk" >> $LogScriptsDir/$LogFileName
					                endif
					             endif
					             breaksw
				                case "MN"
							echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz"
				                     if ( -e $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz" ) then
                                                        cp $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz" $TMP
				                        #uncompress  -c $TMP/$lsite$DOY$lses.$Year$FileExtension.Z >  $TMP/$lsite$DOY$lses.$Year$FileExtension
  					                if ( ! -z $RINEX/$YearLong/$DOY/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz") then
					                   set HourNavListn = "$HourNavListn $TMP/${USITE}"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz
						           set FileSize = `ls -lh $RINEX/$YearLong/$DOY/$HOURONDISK/${USITE}00ITA_R_$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz" | gawk '{print $5; print "Bytes"}'`
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz on disk, size:" $FileSize >> "$LogScriptsDir/$LogFileName"
					                else
					                   set SendMail = "Yes"
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz empty" >> "$LogScriptsDir/$LogFileName"
					                endif
					                breaksw
					             else
					                set SendMail = "Yes"
					                if ( -e $REGET/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MN.rnx.gz" ) then
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz reget -->  $REGET/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_30S_MN.rnx.gz" >> "$LogScriptsDir/$LogFileName"
					                else
					                   echo $RINEX/$YearLong/$DOY/$HOURONDISK/$USITE"00ITA_R_"$YearLong${DOY}$STARTHOUR"00_01H_MN.rnx.gz not on disk" >> "$LogScriptsDir/$LogFileName"
					                endif
					             endif
				                #case "g"
				                #     if ( -e $RINEX/$YearLong/$DOY/$HOURONDISK/$lsite$DOY$lses.$Year$FileExtension.Z ) then
                                                #        cp $RINEX/$YearLong/$DOY/$HOURONDISK/$lsite$DOY$lses.$Year$FileExtension.Z $TMP
				                #        uncompress  -c $TMP/$lsite$DOY$lses.$Year$FileExtension.Z >  $TMP/$lsite$DOY$lses.$Year$FileExtension
  					        #        if ( ! -z $RINEX/$YearLong/$DOY/$lsite$DOY$lses.$Year$FileExtension) then
					        #           set HourNavListg = "$HourNavListg $TMP/$lsite$DOY$lses.$Year$FileExtension"
						#           set FileSize = `ls -lh "$RINEX/$YearLong/$DOY/$HOURONDISK/$lsite$DOY$lses.$Year$FileExtension.Z" | gawk '{print $5; print "Bytes"}'`
					        #           echo "$RINEX/$YearLong/$DOY/$HOURONDISK/$lsite$DOY$lses.$Year$FileExtension.Z on disk, size: $FileSize" >> "$LogScriptsDir/$LogFileName"
					        #        else
					        #           set SendMail = "Yes"
					        #           echo "$RINEX/$YearLong/$DOY/$HOURONDISK/$lsite$DOY$lses.$Year$FileExtension.Z empty" >> "$LogScriptsDir/$LogFileName"
					        #        endif
					        #        breaksw
					        #     else
					        #        set SendMail = "Yes"
					        #        if ( -e $REGET/$lsite$DOY$lses.$Year$FileExtension.Z ) then
					        #           echo "$RINEX/$YearLong/$DOY/$HOURONDISK/$lsite$DOY$lses.$Year$FileExtension.Z reget -->  $REGET/$lsite$DOY$lses.$Year$FileExtension.Z" >> "$LogScriptsDir/$LogFileName"
					        #        else
					        #           echo "$RINEX/$YearLong/$DOY/$HOURONDISK/$lsite$DOY$lses.$Year$FileExtension.Z not on disk" >> "$LogScriptsDir/$LogFileName"
					        #        endif
					        #     endif
				                #case "s"
				                #     breaksw
				                default:
				                     breaksw
				          endsw
		               end
		         end
                         cd $TMP
			 #*****Invio mail se il numero di file orari nella costruzione del build daily � inferiore a TOT******#
			 set NumberHourRinexList = `echo "$HourRinexList" | awk '{print NF}'`   #PF
			 if ("$NumberHourRinexList" < 23) then
			 	echo "Per il giorno $DOY 20$Year sono disponibili solo $NumberHourRinexList file orari" | mailx -s "$Site : problema costruzione doy 20$Year $DOY!" $ActualMailsList
			        echo "Per il giorno $DOY 20$Year sono disponibili solo $NumberHourRinexList file orari" | mailx -s "$Site : problema costruzione doy 20$Year $DOY!" pfabris@inogs.it
			 endif
			 #****************************************************************************************************#
                         # Ricostruzione dei file giornalieri da quelli orari
                         if (-e err.txt) then
                            rm err.txt
                         endif
			 set teqcfile = `whateqc -s $lsite -d "20"$Year$DOY `            #PF2015.01.26
   			 #echo "Teqc daily $teqcfile" >> /home/frednet/provateqc.txt	 #PF2015.01.26
			if ("$HourRinexList" != "") then
		            #teqc -config $TEQC/$teqcfile -O.dec $Sampling +err err.txt $HourRinexList > $TMP/$lsite$DOY"0".$Year"o"
			    ringo merge --sort $HourRinexList > $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx"
			    rnx2crx $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx"
			    rm $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx"
			    #Qui aggiungere conversione da rnx a crz con Anubis (il ringo merge deve creare un file .rnx)
			    #rnx2crx $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx"
			    #if (-e $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx") then
			    #	rm $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx"
			    #endif
			    #gzip $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx"
			    gzip -f $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx" 
			endif
		         if ("$HourNavListn" != "") then
		            #teqc -O.dec $Sampling +err /dev/null $HourNavListn > $TMP/$lsite$DOY"0".$Year"n"
                            ringo merge --sort $HourNavListn > $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx"
			    gzip -f $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx"
			    #set pippo = $<
		         endif
			 #if ("$HourNavListg" != "") then
		         #   teqc -O.dec $Sampling +err /dev/null $HourNavListg > $TMP/$lsite$DOY"0".$Year"g"
                         #   #set pippo = $<
		         #endif
		         if ( -e $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz" && -e $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz") then
				#Anubis --full :inp:rinexo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz"  :inp:rinexn $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz" :out:xtr $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.xtr.gz"
				Anubis --full :inp:rinexo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz"  :inp:rinexn $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz" :out:xml $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.xml.gz"
				Anubis --full :inp:rinexo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz"  :inp:rinexn $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz" :out:json $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.json.gz"
		                Anubis --full :inp:rinexo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz"  :inp:rinexn $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz" :out:xtr $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.xtr.gz" :qc:sec_sum="9" :qc:sec_hdr="2" :qc:sec_est="2" :qc:sec_obs="2" :qc:sec_gap="2" :qc:sec_bnd="2" :qc:sec_pre="2" :qc:sec_ele="2" :qc:sec_mpx="2" :qc:sec_snr="2" :qc:int_stp="900" :qc:int_gap="600" :qc:int_pcs="1800" :qc:mpx_nep="20" :qc:mpx_lim="3.0" :qc:col_sat="32" :qc:ele_cut="0"
				#teqc +qc -plot +err /dev/null +out /dev/null -nav $TMP/$lsite$DOY"0".$Year"n",$TMP/$lsite$DOY"0".$Year"g" $TMP/$lsite$DOY"0".$Year"o"
		         else
		            set SendMail = "Yes"
		         endif
                         # recupero del sampling rate massimo relativo ai file rinex considerati
                         if ( $?SamplingFromFile ) then
                            unset SamplingFromFile
                         else
                         endif
                         foreach Gap ($GapsType)
                            set NumOfGaps = `cat err.txt | gawk 'BEGIN{i=0} {if ($0 ~"poss. incr. of sampling int. OR data gap of '"$Gap"'.000 seconds") i++} END{print i}'`
                            if ($NumOfGaps > 0) then
                               # possono essere dovuti ad un campionamento a 1s 0 a 5s su file da 30s -> dimensione del gap 30s numero GAPS <= 2880,
                               # possono essere dovuti ad un campionamento a 1s su file da 5s -> dimensione del gap 5s numero GAPS <= 17280
                               set num = 1
                               while ($num <= $#GapsType)
                                     if ($GapsType[$num] == $Gap) then
                                        if ($NumOfGaps <= $GapsSafe[$num]) then
                                        else
                                           if ( $?SamplingFromFile ) then
                                           else
                                              set SamplingFromFile = "$Gap" # avverte i processi succesivi che il file non supporta questa decimazione
                                           endif
                                        endif
                                     endif
                                     @ num++
                               end
                            endif
                         end
                         if  !($?SamplingFromFile) then
                             if ( -e $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz" ) then
		                #rnx2crx $TMP/$lsite$DOY"0".$Year"o" - > $TMP/$lsite$DOY"0".$Year"d"
		                #compress -c $TMP/$lsite$DOY"0".$Year"d" > $TMP/$lsite$DOY"0".$Year"d.Z"
		                set FileSize = `ls  -lh $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz"  | gawk '{print $5; print "Bytes"}'`
		                echo $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz on disk, size: $FileSize" >> "$LogScriptsDir/$LogFileName"
		                #rm $TMP/$lsite$DOY"0".$Year"o"
				##2023.12 Create crinex3 from crinex2 with Anubis
				#Anubis --rinexo $TMP/$lsite$DOY"0".$Year"d.Z"  --crx3 "$TMP/"$USITE"00ITA_R_"$Year$DOY"_01D_"$Sampling"S_MO.crx.gz" :out:log /dev/stdout
                                ##Anubis --edit :gen:rec $USITE"00ITA" :gen:sys "GPS GLO" :inp:rinexn ""$TMP/$lcsite"%j"0".%yn.Z" $TMP/$lcsite"%j"0".%yg.Z" :out:rinexn3 $RINEX/$Year/$DOY/$USITE"00ITA_R_"%Y%j"_01D_"$Sampling"S_MN.rnx.gz" :out:log /dev/stdou
				##rm $TMP/$lsite$DOY"0".$Year"d"
		             else
		                set SendMail = "Yes"
		                echo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.crx.gz not on disk" >> "$LogScriptsDir/$LogFileName"
		             endif
		             if ( -e $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz" ) then
		                #compress -c $TMP/$lsite$DOY"0".$Year"n" > $TMP/$lsite$DOY"0".$Year"n.Z"
		                set FileSize = `ls  -lh $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz" | gawk '{print $5; print "Bytes"}'`
		                echo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz on disk, size:" $FileSize >> $LogScriptsDir/$LogFileName
		                #rm $TMP/$lsite$DOY"0".$Year"n"
		             else
		                set SendMail = "Yes"
		                echo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.gz not on disk" >> $LogScriptsDir/$LogFileName
		             endif
			     #if ( -e $TMP/$lsite$DOY"0".$Year"g" ) then
		             #   compress -c $TMP/$lsite$DOY"0".$Year"g" > $TMP/$lsite$DOY"0".$Year"g.Z"
		             #   set FileSize = `ls  -lh "$TMP/$lsite$DOY"0".$Year"g.Z""| gawk '{print $5; print "Bytes"}'`
		             #   echo "$lsite$DOY"0".$Year"g.Z" on disk, size: $FileSize" >> "$LogScriptsDir/$LogFileName"
		             #   #rm $TMP/$lsite$DOY"0".$Year"g"
		             #else
		             #   set SendMail = "Yes"
		             #   echo "$lsite$DOY"0".$Year"g.Z" not on disk" >> "$LogScriptsDir/$LogFileName"
		             #endif
		             if ( -e $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.xtr.gz" ) then
		                #mv $TMP/$lsite$DOY"0".$Year"S" $TMP/$lsite$DOY"0".$Year"s"
                                ## controllo la qualit� del dato
                                #set NumEpochs = `cat  $TMP/$lsite$DOY"0".$Year"s" | gawk 'BEGIN {FS=":"} $0 ~/Poss. # of obs epochs/ {print $2}' | gawk '{print $1}'`
                                #set NumEpochsWithData = `cat  $TMP/$lsite$DOY"0".$Year"s" | gawk 'BEGIN {FS=":"} $0 ~"Epochs w/ observations" {print $2}' | gawk '{print $1}'`
                                #compress -c $TMP/$lsite$DOY"0".$Year"s" > $TMP/$lsite$DOY"0".$Year"s.Z"
                                #rm $TMP/$lsite$DOY"0".$Year"s"
                                set RATIO = `zcat $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.xtr.gz"  | grep "=TOTSUM" | awk '{print $11}' | awk -F '.' '{print $1}'`
				set EPOCHSWITHDATA = `zcat $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.xtr.gz"  | grep "=TOTSUM" | awk '{print $10}'`
				#if ( $NumEpochsWithData < $NumEpochsSafe ) then
                                if ( $RATIO < $RATIOLIMIT) then
				   mv $TMP/$USITE"00ITA_R_"$YearLong$DOY* $REGET/
                                   echo $lsite$DOY"0".$Year"o is incomplete, file compressed and skipped (see "$REGET"/ directory)" >> $LogScriptsDir/$LogFileName
                                else
                                   # se esistono copie precedenti finite in reget a causa di un errore o di una mancanza di un file orario
                                   # poi recuperato, � necessario eliminare i file in questione dalla dir reget
                                   #if ( -e $REGET/$lsite$DOY"0".$Year"?".Z ) then
                                   #   rm $REGET/$lsite$DOY"0".$Year"?".Z
                                   #endif
				   set FileSize = `ls  -lh $TMP/$USITE"00ITA_R_"$YearLong$DOY"0000_01D_30S_MO.rnx.xtr.gz" | gawk '{print $5; print "Bytes"}'`
                                   #set FileSize = `ls "$TMP/$lsite$DOY"0".$Year"s.Z"" -lh | gawk '{print $5; print "Bytes"}'`
                                   echo $USITE"00ITA_R_"$YearLong$DOY"0000_01D_MN.rnx.xtr.gz on disk, size: "$FileSize >> $LogScriptsDir/$LogFileName

                                   # scrittura dei dati nella directory finale:
                                   #ls $TMP/$lsite$DOY"0".${Year}?.Z
				   rm $HourRinexList
                                   rm $HourNavListn
				   mv $TMP/$USITE"00ITA_R_"$YearLong$DOY*gz $RINEX/$YearLong/$DOY/
				   #mv $TMP/$USITE* $RINEX/$YearLong/$DOY/ #2023.12 Move OBS rinex3 to FTP_data
                                   #--------------- Sessione upload ftp -----------------
      	                           if ($FTPOk == "Yes") then
      	                              if (-e $DumpDir/$Site/$Cfg_PUT_FTP_Script) then
                                         set NumRec = `cat $DumpDir/$Site/$Cfg_PUT_FTP_Script | awk ' ! /#/ {print $0}' | gawk 'END{print NR}'`
                                         set Rec = 1
                                         while ($Rec <= $NumRec)
                                            set RECORD=`cat $DumpDir/$Site/$Cfg_PUT_FTP_Script | awk ' ! /#/ {print $0}' | gawk '{if (NR == "'$Rec'") print $0}'`
      		                            set REMOTE_MACHINE  = `echo $RECORD[1]` >& /dev/null
                                            set REMOTE_USER = `echo $RECORD[2]` >& /dev/null
                                            set REMOTE_PASSWORD = `echo $RECORD[3]` >& /dev/null
                                            set REMOTE_DIR = `echo $RECORD[4]` >& /dev/null
      			                    if ($#RECORD == 5) then
      			                       set FILE_TYPE = `echo $RECORD[5]` >& /dev/null
      			                    endif
      			                    @ Rec++
      		                            if ($#RECORD == 5) then
      		                               set lcsite = `echo $Site | tr 'A-Z' 'a-z'` # SITE -> site
					       set FtpFileList = `ls $RinexDir/$YearLong/$DOY/$Site*.crx.gz | gawk ' { print $0}'`
					        if ( "$FtpFileList" != "") then
		     		               #2024.03if (-e $RINEX/$YearLong/$DOY/$lcsite${DOY}0.${Year}d.Z | -e $RINEX/$YearLong/$DOY/$lcsite${DOY}0.${Year}o.Z) then
                                                set FtpFileList = `ls $RinexDir/$YearLong/$DOY/$Site*.crx.gz | gawk ' { print $0}'`
						#2024.03set FtpFileList = `ls $RINEX/$YearLong/$DOY/$lcsite${DOY}0.${Year}?.Z | gawk 'BEGIN{FS="."} {if (match("'"$FILE_TYPE"'",substr($2,3,1))) print $0}'`
      			                          echo "- Uploads to $REMOTE_MACHINE for user $REMOTE_USER" >> "$LogScriptsDir/$LogFileName"
                                                  echo "$PUT_FTP_Script -m $REMOTE_MACHINE -u $REMOTE_USER -p $REMOTE_PASSWORD -rd $REMOTE_DIR -f $FtpFileList" >> "$LogScriptsDir/$LogFileName"
      			                          $PUT_FTP_Script -m "$REMOTE_MACHINE" -u $REMOTE_USER -p $REMOTE_PASSWORD -rd $REMOTE_DIR -f $FtpFileList >> "$LogScriptsDir/$LogFileName"
                                                  $PUT_SFTP_Script -m "$REMOTE_MACHINE" -u $REMOTE_USER -p $REMOTE_PASSWORD -rd $REMOTE_DIR -f $FtpFileList >> "$LogScriptsDir/$LogFileName"
					       else
      		                                  echo "$RINEX/$YearLong/$DOY/$lcsite${DOY}0.${Year}d.Z not on disk, impossible to upload the file to the $REMOTE_MACHINE machine" >> "$LogScriptsDir/$LogFileName"
      	                                       endif
      		                            else
      		                               echo "- No uploading needed to $REMOTE_MACHINE for user $REMOTE_USER according the config file $DumpDir/$Site/$Cfg_PUT_FTP_Script for $Site site" >> "$LogScriptsDir/$LogFileName"
      		                            endif
      		                         end
      		                      else
      		                         echo "No $DumpDir/$Site/$Cfg_PUT_FTP_Script on disk. No data uploaded for $Site site" >> "$LogScriptsDir/$LogFileName"
      		                      endif
                                   endif
                                   #--------------- Fine sessione upload ftp -----------------
                                endif
		             else
		                set SendMail = "Yes"
                                set NumEpochsWithData = 0
                                #set hrs100 = 0;
		                echo "$RINEX/$YearLong/$DOY/$lsite$DOY"0".$Year"s.Z" not on disk" >> "$LogScriptsDir/$LogFileName"
		             endif
		             #if ("$HourRinexList" != "") then
		             #   rm $HourRinexList
		             #else
		             #endif
		             #if ("$HourNavListn" != "") then
		             #   rm $HourNavListn
		             #else
			     #if ("$HourNavListg" != "") then
		             #   rm $HourNavListg
		             #else
		             #endif
                         else
                            echo "$JOB : data at ${Sampling}s not available for site: $ucsite, doy: $DOY, year: $YearLong"  # da modificare
                         endif # fine is sul test del sampling
	         end # fine foreach sul SITE
            end # fine foreach sul DOY
         end # fine while sul YEAR
end # fine foreach sul Sampling
# in base ai controlli fatti in precedenza, se qualcosa va storto viene spedita una e-mail
set SendMail = "Yes" # decido io e basta!
if ( "$SendMail" == "Yes" ) then
else
   # aggiunge un po' di sicurezza ai filtri precedenti
   # controllo con gawk sul file di log delle parole chiave:
   # incorrect, refused,  impossible, not per l'ftp
   # skipped, incomplete, empty per tutti gli script
   # terminated per un errore di sharc
   set SendMail = (`cat "$LogScriptsDir/$LogFileName" | gawk '/incorrect/ || /refused/ || /impossible/ || /not/ || /skipped/ || /incomplete/ || /empty/ {print "Yes"}'`)
endif
if ( "$SendMail" != "" ) then
   if ( "$SendMail" == "Yes") then
     cat "$LogScriptsDir/$LogFileName" | mailx -s "Daily building status" "$ActualMailsList"
   endif
endif

#### CLEANUP
if ( -e $TMP) then
   rm -rf $TMP
endif
