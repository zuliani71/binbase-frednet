#!/bin/tcsh
# create da M. Murray (June 2002)
# modified by MB & AG (June 2002)
# modified by DZ (November 2002)
# modified by PF (December 2023)
# modified by PF (March 2024)

#### initial settings
set HOURS = 1
set SECONDS = `echo "$HOURS 3600" | gawk '{$1=$1*$2;print int($1)}'`
set JOB = `basename $0`
set ARCHIVE = /data/frednet
set BRANDMARK = BRAND  #PF
set NumEpochsPercent1 = 0.9 # � la % minima di epoche che si dovrebbero vedere in base al file di navigazione
set NumEpochsPercent2 = 0.9 # � la % minima di epoche con dati rilevanti ricavati dal file di osservazione
set NumGapsPercent1 = 0.5 # � la % minima di gaps per il controllo sulla decimazione dei file rinex
set RATIOLIMIT = 50
set SamplingInterval = ( 1 30) # intervalli di campionamento 30s 5s 1s ***Dal 29/05/2008 solo file 1s***, dal ***Dal 03/06/2008 rimessi file a 30s***, #dal ***Dal 01/09/2010 solo file a 1s***
set Epochs = ()
set GapsSafe = ()
foreach Interval ($SamplingInterval)
    set Epoch = `echo "$SECONDS $Interval" | gawk '{$1=$1/$2;print int($1)}'`
    set GapSafe = `echo "$Epoch $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
    set Epochs = ($Epochs $Epoch)
    set GapsSafe =  ($GapsSafe $GapSafe)
end
set GapsType = ($SamplingInterval)
set ERROR_Managed = ()

#### checking line commands
if ($#argv < 1) then
 echo The program
 echo - creates the RINEX obs and nav files
 echo - move files in $ARCHIVE/FTP_Data/rinex or $ARCHIVE/WORKDIR/UNPUB/rinex
 echo - move files in $ARCHIVE/FTP_Data/rinex_1s or  $ARCHIVE/WORKDIR/UNPUB/rinex
 echo - move files in $ARCHIVE/FTP_Data/rinex_5s or $ARCHIVE/WORKDIR/UNPUB/rinex
 echo get_data site doy hour year opt
 exit 1
else if ($#argv < 4) then
 echo "$JOB : not enough arguments"
 exit 2
endif

#### input variables
set site = $1
set doy  = $2
set hour = $3
set year = $4
if ($5 == "unpub") then
   set unpub = "Yes"
   set DIRDATA = "WORKDIR/UNPUB"
else
   set unpub = "No"
   set DIRDATA = "FTP_Data"
endif

echo "$site $doy $hour $year $unpub"

set day   = `date --date="01/01/$year + $2 days  -1 days" +%d`
set month = `date --date="01/01/$year + $2 days  -1 days" +%m`

#### global settings
set yr = `sh_year -year $year` # yyyy yy y
set ucsite = `echo $site | tr 'a-z' 'A-Z'` # site -> SITE
set lcsite = `echo $site | tr 'A-Z' 'a-z'` # SITE -> site
set ses = `echo $hour | hr2ses`
set uses = `echo $ses | tr 'a-z' 'A-Z'` # session -> SESSION
set lses = `echo $ses | tr 'A-Z' 'a-z'` # SESSION -> session
set Xfile = U${ucsite}$uses$yr[2].${doy} # raw file to transform
set FileTypeDir = Hourly
set MKRINEX = $ARCHIVE/WORKDIR/mkrinex
set TEQC = $FREDNET/OPTIONS/TEQC
set RINEX = $ARCHIVE/$DIRDATA/rinex
set RAW = $ARCHIVE/$DIRDATA/raw
set BRAND = brand.cfg                                                                      # PF
set STARTHOUR = `echo "${hour} - 1" | bc | awk '{if (length($1) == "1") print "0"$1; else print $1}'`

#PF Inserire qui il bivio ash-top.Leggere nel file di configurazione
#PF di che tipo di ricevitore si tratti
#PF Fare un awk del file .cfg
set CONFDIR = "$MKRINEX/$site/$BRAND"                                                      # PF Variabile tmp
#set LOGFILE = "$MKRINEX/$site/$site.tdump.log"                                            # File di log tmp
set WHICH   = `cat $CONFDIR | awk '! /#/ { if ($1 == "'"$BRANDMARK"'" )   print  $3 }  '`  # PF
if ( $WHICH == "L" ) then                                                                  # PF
   set Xfile = $WHICH${ucsite}$uses$yr[2].${doy}                                           # PF raw file to transform
   set TEQCOPTION = "-leica mdb"                                                           # PF
   set LOGFILE = "$MKRINEX/$site/$site.ldump.log"                                          # File di log tmp
endif											   # PF
if ( $WHICH == "T" ) then                                                                  # PF
   set Xfile = $WHICH${ucsite}$uses$yr[2].${doy}                                           # PF raw file to transform
   set TEQCOPTION = "-topcon tps"                                                          # PF
   set LOGFILE = "$MKRINEX/$site/$site.tdump.log"                                          # File di log tmp
endif											   # PF
if ( $WHICH == "U" ) then                                                                  # PF
   set Xfile = $WHICH${ucsite}$uses$yr[2].${doy}                                           # PF
   set TEQCOPTION = "-ash u"                                                               # PF
endif
if ( $WHICH == "S" ) then                                                                  # PF
   set Xfile = $WHICH${ucsite}$uses$yr[2].${doy}                                           # PF raw file to transform
   set TEQCOPTION = ""                                                          	   # PF
   set LOGFILE = "$MKRINEX/$site/$site.sdump.log"                                          # File di log tmp
endif											   # PF
if ( $WHICH == "R" ) then                                                                  # PF
   set Xfile = $WHICH${ucsite}$uses$yr[2].${doy}                                           # PF raw file to transform
   set TEQCOPTION = "-tr d"                                                          	   # PF
   set LOGFILE = "$MKRINEX/$site/$site.rdump.log"                                          # File di log tmp
endif


set file = $MKRINEX/$ucsite/$FileTypeDir/$Xfile # full path of raw file                    # PF
#### archive configuration
# set REGET =  $MKRINEX/$ucsite/$FileTypeDir/reget; mkdir -p $REGET >& /dev/null
set TMP = /scratch/data/$ucsite/$FileTypeDir/`basename $0` ; mkdir -p $TMP >& /dev/null


#### check if the rinex file already exist
foreach Sampling ($SamplingInterval)
         switch($Sampling)
		case 30:
                     set RINEX = $ARCHIVE/$DIRDATA/rinex
                     set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget; mkdir -p $REGET 
                     breaksw
                case 5:
                     set RINEX = $ARCHIVE/$DIRDATA/rinex_5s
                     set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget_5s; mkdir -p $REGET 
                     breaksw
                case 1:
                     set RINEX = $ARCHIVE/$DIRDATA/rinex_1s
                     set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget_1s; mkdir -p $REGET 
                     breaksw
         endsw
	 #echo "$RINEX/$yr[1]/$doy/$hour/*$ucsite*$yr[2]$doy*MO.rnx"
         #set MOFILE = `basename "$RINEX/$yr[1]/$doy/$hour/*$ucsite*$yr[2]$doy*MO.rnx"`
         #set MNFILE = `basename "$RINEX/$yr[1]/$doy/$hour/*$ucsite*$yr[2]$doy*MN.rnx"`
   	 # Create  correct sampling sintaz for rinex 3.xx name
   	 if ($Sampling == "1" || $Sampling == "5") then 
        	set SAMPSINTAX = `echo "0${Sampling}"` 
   	 else
        	set SAMPSINTAX = ${Sampling}
   	 endif
         #set MOFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.rnx
         #set MNFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_MN.rnx
         set MOFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.crx #2024.06.10
         set MNFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_MN.crx                #2024.06.10
         #2024.03.11if (-e $RINEX/$yr[1]/$doy/$hour/$MOFILE) then
	 if (-e $RINEX/$yr[1]/$doy/$hour/$MOFILE) then
            echo "$JOB : $RINEX/$yr[1]/$doy/$hour/$MOFILE already exist but not compressed yet"
            #2024.03.11if (-e $RINEX/$yr[1]/$doy/$hour/$lcsite${doy}$lses.$yr[2]d) then
            #2024.03.11   rm $RINEX/$yr[1]/$doy/$hour/$lcsite${doy}$lses.$yr[2]d
            #2024.03.11endif
            gzip  $RINEX/$yr[1]/$doy/$hour/$MOFILE
            #2024.03.11rm $RINEX/$yr[1]/$doy/$hour/$lcsite${doy}$lses.$yr[2]o
            #2024.03.11compress "$RINEX/$yr[1]/$doy/$hour/$lcsite${doy}$lses.$yr[2]"?
            echo "$JOB : $MOFILE compressed into $MOFILE.gz (see $RINEX/$yr[1]/$doy/$hour/ directory)"
            echo ""
            set ERROR_Managed = ($ERROR_Managed $Sampling)
         else
            if (-e $RINEX/$yr[1]/$doy/$hour/$MOFILE.gz) then #PF01092010 Controllo su directory RINEX
               echo "$JOB : $MOFILE already exist (see $RINEX/$yr[1]/$doy/$hour/ directory)"
	       echo ""
               set ERROR_Managed = ($ERROR_Managed $Sampling)
            else
	       if (-e $REGET/$MOFILE.gz) then
	          echo "$JOB : $REGET/$MOFILE.gz already exist and has been skipped (see $REGET directory)"
		  echo ""
                  set ERROR_Managed = ($ERROR_Managed $Sampling)
	       else
	          if (-e $REGET/$MOFILE) then
	             echo "$JOB : $REGET/$MOFILE  already exist but not compressed yet"
		     gzip $REGET/$MOFILE 
		     #2024.03.11if (-e $REGET/$lcsite${doy}$lses.$yr[2]d) then
                     #2024.03.11   rm $REGET/$lcsite${doy}$lses.$yr[2]d
                     #2024.03.11endif
                     #2024.03.11rnx2crx "$REGET/$lcsite${doy}$lses.$yr[2]o"
		     #2024.03.11rm $REGET/$lcsite${doy}$lses.$yr[2]o
		     #2024.03.11compress "$REGET/$lcsite${doy}$lses.$yr[2]"?
		     echo "$JOB : $MOFILE compressed into $MOFILE.gz and skipped (see $REGET directory)"
		     echo ""
                     set ERROR_Managed = ($ERROR_Managed $Sampling)
		  else
		  endif
	       endif
	    endif
         endif
end

# check if all errors were managed
#set ERROR_Managed = ()
set ERROR_PASS = ()
foreach Interval ($SamplingInterval)
    set num = 0
    foreach ERROR ($ERROR_Managed)
        if ($Interval == $ERROR) then
           @ num ++
        endif
    end
    if ($num == 0) then
       set ERROR_PASS = ($ERROR_PASS $Interval)
    endif
end
if ($#ERROR_PASS == 0) then
   set SamplingInterval = ()
   if ( -e $TMP) then
      rm -rf $TMP
   endif
   exit 4
else
   set SamplingInterval = "$ERROR_PASS"
endif

# 1st check - file must exist
if (-e $file ) then
  cp $file $TMP
else
  echo "$JOB : $file does not exist" >> $LOGFILE
  echo ""
  if ( -e $TMP) then
     rm -rf $TMP
  endif
  exit 3
endif

cd $TMP
foreach Sampling ($SamplingInterval)
   # set safe values for a correct check
   switch($Sampling)
	case 30:
              set NumEpochsDefault = 120
              set NumEpochsMin  = `echo "$NumEpochsDefault $NumEpochsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
              set NumEpochsSafe = `echo "$NumEpochsMin $NumEpochsPercent2" | gawk '{$1=$1*$2;print int($1)}'`
              #set NumGapsMin = `echo "$NumEpochsSafe $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
              set RINEX = $ARCHIVE/$DIRDATA/rinex
              set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget; mkdir -p $REGET
              breaksw
        case 5:
              set NumEpochsDefault = 720
              set NumEpochsMin  = `echo "$NumEpochsDefault $NumEpochsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
              set NumEpochsSafe = `echo "$NumEpochsMin $NumEpochsPercent2" | gawk '{$1=$1*$2;print int($1)}'`
              #set NumGapsMin = `echo "$NumEpochsSafe $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
              set RINEX = $ARCHIVE/$DIRDATA/rinex_5s
              set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget_5s; mkdir -p $REGET 
              breaksw
        case 1:
              set NumEpochsDefault = 3600
              set NumEpochsMin  = `echo "$NumEpochsDefault $NumEpochsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
              set NumEpochsSafe = `echo "$NumEpochsMin $NumEpochsPercent2" | gawk '{$1=$1*$2;print int($1)}'`
              #set NumGapsMin = `echo "$NumEpochsSafe $NumGapsPercent1" | gawk '{$1=$1*$2;print int($1)}'`
              set RINEX = $ARCHIVE/$DIRDATA/rinex_1s
              set REGET = $MKRINEX/$ucsite/$FileTypeDir/reget_1s; mkdir -p $REGET 
              breaksw
   endsw
   # Create  correct sampling sintaz for rinex 3.xx name
   if ($Sampling == "1" || $Sampling == "5") then 
	set SAMPSINTAX = `echo "0${Sampling}"` 
   else
	set SAMPSINTAX = ${Sampling}
   endif
   # Make rinex nav and obs files
   set STARTHOUR = `echo "${hour} - 1" | bc | awk '{if (length($1) == "1") print "0"$1; else print $1}'`
   if (-e err.txt) then
      rm err.txt
   endif
   if ( $WHICH == "R" ) then                                                                  # PF
   	#runpkr00 -d $Xfile
	#set Xfile = `echo $Xfile | awk '{print substr($1,1,length($1)-4)".dat"}'`
        runpkr00 -g -d $Xfile
        set OriginalXfile = `echo $Xfile | awk '{print substr($1,1,length($1)-4)"'".${doy}"'"}'`
        set Xfile = `echo $Xfile | awk '{print substr($1,1,length($1)-4)".tgd"}'`
        set NEWMOFILE    =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.rnx
        set NEWMNFILECRX =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_MN.rnx
        teqc $TEQCOPTION -week ${yr[1]}:$doy -config $TEQC/$lcsite -O.int 1 -O.dec $Sampling +err err.txt  +nav $NEWMNFILECRX $Xfile > $lcsite.o
        #mv  $MOFILE $NEWMOFILE
        #mv  $MNFILE $NEWMNFILECRX
        #rnx2crx $NEWMOFILE    #2024.06.07
        #rm $NEWMOFILE         #2024.06.07
        set NEWMOFILECRX = ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.crx
        ringo merge $lcsite.o  --outver 3.04 >  $NEWMOFILE 
        #Anubis :inp:rinexo $NEWMOFILE :out:crinexo3 $NEWMOFILECRX
        rnx2crx $NEWMOFILE    #2024.06.07 
	gzip -f $NEWMOFILECRX  #2024.06.07
        #teqc $TEQCOPTION -week ${yr[1]}:$doy -config $TEQC/$lcsite -O.int 1 -O.dec $Sampling +err err.txt  +nav $lcsite${doy}$lses.$yr[2]n $Xfile > $lcsite${doy}$lses.$yr[2]o  
   endif
   if ( $WHICH == "S" ) then
	#set STARTHOUR = `echo "${hour} - 1" | bc | awk '{if (length($1) == "1") print "0"$1; else print $1}'`
	stx2rnx SRC:$Xfile RXF:Rinex3.04 MIX:Y NVS:GPS~GLO~GAL~BDS TI:${Sampling}s
	echo "*$uses*$yr[2]$doy$hour*MO.rnx"
        #set MOFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${hour}00_01H_${Sampling}S_MO.rnx
        #set MNFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${hour}00_01H_MN.rnx
	set MOFILE = `ls *$uses*$yr[2]$doy*${Sampling}S*_MO.rnx`
        set MNFILE = `ls *$uses*$yr[2]$doy*MN.rnx`
	# Esegui la sostituzione del deltaH con sed sui soli file stonex
	sed -i  '/ANTENNA: DELTA/ s/0\.0080/0\.0083/' $MOFILE
        set NEWMOFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.rnx
        set NEWMNFILECRX =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_MN.rnx
	#set NEWMOFILE = `echo "$MOFILE" | sed -e s/$WHICH${ucsite}$uses$yr[2]/${ucsite}00ITA/g`
        #set NEWMNFILE = `echo "$MNFILE" | sed -e s/$WHICH${ucsite}$uses$yr[2]/${ucsite}00ITA/g`
	mv  $MOFILE $NEWMOFILE
        mv  $MNFILE $NEWMNFILECRX
        rnx2crx $NEWMOFILE    #2024.06.07 
        #rm $NEWMOFILE         #2024.06.07
        set NEWMOFILECRX = ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.crx
        gzip -f $NEWMOFILECRX  #2024.06.07
	#gzip $NEWMOFILE
        #gzip $NEWMNFILE
   endif
   if ( $WHICH == "T" ) then
	rm *${doy}*.$yr[2]o
	rm *${doy}*.$yr[2]p
	set tps2rinfile = `whatps2rin -s $lcsite -d $yr[1]$doy -t $hour"0000"`
        #set RECSER  = `cat /home/frednet/OPTIONS/TPS2RIN/$tps2rinfile  | grep "REC \#" | awk -F "=" '{print $2}' | awk '{ gsub (" ", "", $0); print}'`
        #set RECTYPE = `cat /home/frednet/OPTIONS/TPS2RIN/$tps2rinfile  | grep "REC TYPE" | awk -F "=" '{print $2}' | awk '{print $1, $2}' `
	#echo "$RECSER $RECTYPE"
	wine /home/frednet/bin/tps2rin3.exe -p /home/frednet/OPTIONS/TPS2RIN/$tps2rinfile -I $Sampling  --sn $Xfile
        set MOFILE = `ls *${doy}*.$yr[2]o`
        set MNFILE = `ls *${doy}*.$yr[2]p`
        set NEWMOFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.rnx
        set NEWMNFILECRX =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_MN.rnx
        #Anubis --edit :inp:rinexo $MOFILE :out:rinexo3 ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.rnx :hdr:rinexo:rectype="$RECTYPE"
	#exit
        mv  $MOFILE $NEWMOFILE
        mv  $MNFILE $NEWMNFILECRX
        rnx2crx $NEWMOFILE    #2024.06.07
	#rm $NEWMOFILE         #2024.06.07
        set NEWMOFILECRX = ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.crx
        gzip -f $NEWMOFILECRX  #2024.06.07
	if (${ucsite} == "TOLS") then
		ringo merge --h.rectype "TPS GB-1000"  --h.recnum "T224773" --h.recver "3.5 Feb,01,2019 p5" $NEWMOFILE > pippo.rnx.o
		mv -f pippo.rnx.o  $NEWMOFILE 
                rnx2crx $NEWMOFILE      #2024.06.07
                set NEWMOFILECRX = ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.crx 
                #rm $NEWMOFILE           #2024.06.07
                gzip -f  $NEWMOFILECRX  #2024.06.07
	endif
        #gzip $NEWMOFILE
        #gzip $NEWMNFILE
   endif
   if ( $WHICH == "L" ) then
        rm *${doy}*.$yr[2]*
	mv $Xfile $Xfile.m00
	/home/frednet/bin/mdb2rinex -f $Xfile.m00
	mv $Xfile.m00 $Xfile
        #set tps2rinfile = `whatps2rin -s $lcsite -d $yr[1]$doy -t $hour"0000"`
        #wine /home/frednet/bin/tps2rin3.exe -p /home/frednet/OPTIONS/TPS2RIN/$tps2rinfile -I $Sampling  $Xfile
	set MOFILE = `ls *${doy}*.$yr[2]o`
	set NEWMOFILE =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.rnx
        mv  $MOFILE $NEWMOFILE
        rnx2crx $NEWMOFILE
        set NEWMOFILECRX = ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_${SAMPSINTAX}S_MO.crx
        gzip -f $NEWMOFILECRX  #2024.06.07
        set MNFILE = `ls *${doy}*.$yr[2]*`
        set NEWMNFILECRX =  ${ucsite}00ITA_R_$yr[1]${doy}${STARTHOUR}00_01H_MN.rnx
	#mv $MNFILE $NEWMNFILECRX
	ringo merge ${lcsite}${doy}?.$yr[2]? -o $NEWMNFILECRX
        rm *${doy}*.$yr[2]*
        #gzip $NEWMOFILE
        #gzip $NEWMNFILE
   endif
   #set teqcfile = `whateqc -s $lcsite -d $yr[1]$doy -t $hour"0000"` #PF2015.01.26
   #echo "Teqc hourly $teqcfile" >> /home/frednet/provateqc.txt      #PF2015.01.26
   #teqc $TEQCOPTION -week ${yr[1]}:$doy -config $TEQC/$lcsite -O.int 1 -O.dec $Sampling +err err.txt  +nav $lcsite${doy}$lses.$yr[2]n $Xfile > $lcsite${doy}$lses.$yr[2]o #PF 2015.01.26

#   teqc $TEQCOPTION -week ${yr[1]}:$doy -config $TEQC/$teqcfile -O.int 1 -O.dec $Sampling +err err.txt  +nav $lcsite${doy}$lses.$yr[2]n,$lcsite${doy}$lses.$yr[2]g $Xfile > $lcsite${doy}$lses.$yr[2]o #PF 2015.01.26
      #PF+nav $lcsite${doy}$lses.$yr[2]n $Xfile > $lcsite${doy}$lses.$yr[2]o
   # recover sampling time from error file

   Anubis --full :inp:rinexo $NEWMOFILE  :inp:rinexn $NEWMNFILECRX :out:xtr  $NEWMOFILE.xtr
   Anubis --full :inp:rinexo $NEWMOFILE  :inp:rinexn $NEWMNFILECRX :out:xml  $NEWMOFILE.xml
   Anubis --full :inp:rinexo $NEWMOFILE  :inp:rinexn $NEWMNFILECRX :out:json $NEWMOFILE.json
   rm $NEWMOFILE
   set RATIO = `cat $NEWMOFILE.xtr | grep "=TOTSUM" | awk '{print $11}' | awk -F '.' '{print $1}'`
   if ( $?SamplingFromFile ) then
      unset SamplingFromFile
   else
   endif
   #foreach Gap ($GapsType)
   #   set NumOfGaps = `cat err.txt | gawk 'BEGIN{i=0} {if ($0 ~"poss. incr. of sampling int. OR data gap of '"$Gap"'.000 seconds") i++} END{print i}'`
   #   if ($NumOfGaps > 0) then
   #      # possono essere dovuti ad un campionamento a 1s 0 a 5s su file da 30s -> dimensione del gap 30s numero GAPS <= 2880,
   #      # possono essere dovuti ad un campionamento a 1s su file da 5s -> dimensione del gap 5s numero GAPS <= 17280
   #      set num = 1
   #      while ($num <= $#GapsType)
   #            if ($GapsType[$num] == $Gap) then
   #               if ($NumOfGaps <= $GapsSafe[$num]) then
   #               else
   #                  if ( $?SamplingFromFile ) then
   #                  else
   #                     set SamplingFromFile = "$Gap" # avverte i processi succesivi che il file non supporta questa decimazione
   #                  endif
   #               endif
   #            endif
   #            @ num++
   #      end
   #   endif
   #end
   if  !($?SamplingFromFile) then
       # Check rinex file
       #teqc +qc -plot +err /dev/null +out /dev/null -nav $lcsite${doy}$lses.$yr[2]n $lcsite${doy}$lses.$yr[2]o
       if ( -e $NEWMOFILE.xtr) then
          	gzip $NEWMOFILECRX
          	gzip $NEWMNFILECRX
		gzip $NEWMOFILE.xtr 
		gzip $NEWMOFILE.xml 
		gzip $NEWMOFILE.json 
		if ( $RATIO < $RATIOLIMIT ) then
       		#if ( "" != "" ) then
			mv $NEWMOFILE.xtr.gz    $REGET/
                        mv $NEWMOFILE.xml.gz    $REGET/
                        mv $NEWMOFILE.json.gz   $REGET/
                        mv $NEWMOFILECRX.gz        $REGET/
                        mv $NEWMNFILECRX.gz        $REGET/
		endif
      endif
      #if (-e $lcsite${doy}$lses.$yr[2]n && -e $lcsite${doy}$lses.$yr[2]g && -e $lcsite${doy}$lses.$yr[2]S) then
      if (-e $NEWMOFILECRX.gz && -e $NEWMNFILECRX.gz && -e $NEWMOFILE.xtr) then
          #mv $lcsite${doy}$lses.$yr[2]S $lcsite${doy}$lses.$yr[2]s
          #set NumEpochs = `cat  $lcsite${doy}$lses.$yr[2]s | gawk 'BEGIN {FS=":"} $0 ~/Poss. # of obs epochs/ {print $2}' | gawk '{print $1}'`
          set EPOCHSWITHDATA = `cat $NEWMOFILE.xtr | grep "=TOTSUM" | awk '{print $10}'`
	  #set NumEpochsWithData = `cat  $lcsite${doy}$lses.$yr[2]s | gawk 'BEGIN {FS=":"} $0 ~"Epochs w/ observations" {print $2}' | gawk '{print $1}'`
       else
          set EPOCHSWITHDATA = 0
       endif
       # Move RINEX obs, nav and sum files to reget or archive (+ compress session)
       #if ( $NumEpochsWithData < $NumEpochsSafe || $RATIO < $RATIOLIMIT) then
       if ( $RATIO < $RATIOLIMIT) then
       #if ( "" != "" ) then
          #if (-e $lcsite${doy}$lses.$yr[2]d) then
          #   rm $lcsite${doy}$lses.$yr[2]d
          #endif 
          #rnx2crx "$lcsite${doy}
          mv $NEWMOFILE.xtr.gz    $REGET/
          mv $NEWMOFILE.xml.gz    $REGET/
          mv $NEWMOFILE.json.gz   $REGET/
          mv $NEWMOFILECRX.gz        $REGET/
          mv $NEWMNFILECRX.gz        $REGET/
	  #rm $lcsite${doy}$lses.$yr[2]o
          #compress "$lcsite${doy}$lses.$yr[2]"?
          #mv $lcsite${doy}$lses.$yr[2]?.Z $REGET
          if ($EPOCHSWITHDATA  == 0) then
             echo "$JOB : $NEWMNFILECRX is missing, remaining files are compressed and skipped (see $REGET directory)"
          else
             echo "$JOB : $NEWMOFILECRX is incomplete, file compressed and skipped (see $REGET directory)"
          endif
          echo ""
       else
          if ( ! -d $RINEX/$yr[1]/$doy/$hour ) then
             mkdir -p $RINEX/$yr[1]/$doy/$hour
          endif
          #2024.03.11if (-e $lcsite${doy}$lses.$yr[2]d) then
          #2024.03.11   rm $lcsite${doy}$lses.$yr[2]d
          #2024.03.11endif
          #2024.03.11rnx2crx "$lcsite${doy}$lses.$yr[2]o"
          #2024.03.11rm $lcsite${doy}$lses.$yr[2]o
          #2024.03.11compress "$lcsite${doy}$lses.$yr[2]"?
          mv $NEWMOFILE.xtr.gz    $RINEX/$yr[1]/$doy/$hour/
          mv $NEWMOFILE.xml.gz    $RINEX/$yr[1]/$doy/$hour/
          mv $NEWMOFILE.json.gz   $RINEX/$yr[1]/$doy/$hour/
          mv $NEWMOFILECRX.gz        $RINEX/$yr[1]/$doy/$hour/
          mv $NEWMNFILECRX.gz        $RINEX/$yr[1]/$doy/$hour/
	  #2024.03.11#2023.12 Create rinex3 OBS from rinex2
          #2024.03.11Anubis --edit :gen:beg "$yr[1]"-"$month"-"$day"T00:00:00 :gen:end "$yr[1]"-"$month"-"$day"T23:59:59 :gen:rec "$ucsite"00ITA :gen:int "$Sampling" :inp:rinexo "$RINEX/$yr[1]/$doy/$hour/$lcsite"%j%i.%yd.Z :out:crinexo3 "$RINEX/$yr[1]/$doy/$hour/$ucsite"00ITA_R_%Y%j"$hour"00_01H_"$Sampling"S_MO.crx.gz :out:log /dev/stdout
          #2024.03.11#2023.12 Create rinex3 NAV from rinex2
          #2024.03.11Anubis --edit :gen:beg "$yr[1]"-"$month"-"$day"T00:00:00 :gen:end "$yr[1]"-"$month"-"$day"T23:59:59 :gen:rec "$ucsite"00ITA :gen:sys "GPS GLO" :inp:rinexn ""$RINEX/$yr[1]/$doy/$hour/$lcsite"%j%i.%yn.Z "$RINEX/$yr[1]/$doy/$hour/$lcsite"%j%i.%yg.Z" :out:rinexn3 "$RINEX/$yr[1]/$doy/$hour/$ucsite"00ITA_R_%Y%j"$hour"00_01H_"$Sampling"S_MN.rnx.gz :out:log /dev/stdout
          if ( ! -d $RAW/$yr[1]/$doy/$hour ) then
             mkdir -p $RAW/$yr[1]/$doy/$hour
          endif
          cp $file $RAW/$yr[1]/$doy/$hour 
	  echo "$JOB : $RINEX/$yr[1]/$doy/$hour/$NEWMOFILE.gz Ok"
          echo ""
       endif
   else
     echo "$JOB : data at ${Sampling}s not available for site: $ucsite, doy: $doy, year: $yr[1]"
   endif
end

#### CLEANUP
if ( -e $TMP) then
  rm -rf $TMP
endif
